API #1: POST /user/create 
    Implementation Notes
        This endpoint creates a new user on MongoDB based on the arguments 
        passed inside the request body

    Response Class (Status 200)

-------------
Model

Inline Model [
Inline Model 1
]

Inline Model 1{
    facebookID(String, required):
        Unique facebook identifier
    ,
    name(String, required):
        The name of the person
    ,
    paypalID(String, required):
        The name of the person
    ,
    radius(Number, required):
        The name of the person
    ,
    priceLow(Number, required):
        The name of the person
    ,
    priceHigh(Number, required):
        The name of the person
    ,
    restrictions(Array of String, required):
        Describes the dietary restrictions a person has
    ,
    transactions(Array of Transaction Objects, required)
        The list of transactions that the person made
    
}

------------------

 Example Value
    {
        "name" : String,
        "facebookID" : String,
        "paypalID" : String,
        "radius" : Number,
        "priceLow" : Number,
        "priceHigh" : Number,
        restrictions: [{type: String}],
        transactions: [{
            name: String,
            description: String,
            imageUrl: String,
            ingredients: [{type: String}],
            dietaryRestrictions: [{type: String}],
            location: {lat:Number, lon:Number},
            price: Number,
            sellerID: String,
            buyerID: String,
            quantity: Number
        }]
    }

------------
Response Content Type: application/json

On Success Response Message (JSON object)
{
    success: true,
    message: 'User created successfully!',
    user: result, (result is the user object created in MongoDB)
    _id: result.id
}

-----------------

API #2: GET /user/get_user
    Implementation Notes
        This endpoint fetches the user in MongoDB based on an user_id 
        supplied in the query string
    
    Response Class (Status 200)

--------
Model
    Inline Model 1

Inline Model 1{
    user_id
}

--------
Example Value
    {
        user_id: "5ab53cdf12dl223"
    }

Response Content Type: application/json

On Success Response Message (JSON object)
{
    user: result,(where result is the user object retrived)
    status: "pass"
}

----------------

API #3: GET /user/get_users
    Implementation Notes   
        This endpoint fetches all the user stored inside MongoDB

    No arguments required for this API to work
    
    Response Class (Status 200)

Response Content Type: application/json

On Success Response Message(Array of JSON objects)
[user1, user2, user3]

---------------

API #4: PUT /user/update
    Implementation Notes
        This endpoint updates the user based on the user_id provided
        in the request body.
    
    Response Class (Status 200)

Response Content Type: application/json

On Success Response Message(JSON)
{
    user: result, (where the updated user object is retrieved)
    status: pass
}